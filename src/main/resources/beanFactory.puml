@startuml
interface BeanDefinitionReader {
~ BeanDefinitionRegistry getRegistry()
~ ResourceLoader getResourceLoader()
~ void loadBeanDefinitions(Resource)
~ void loadBeanDefinitions(String)
~ void loadBeanDefinitions(String[])
}
note top:读取bean定义信息的抽象接口

abstract class AbstractBeanDefinitionReader {
- BeanDefinitionRegistry registry
- ResourceLoader resourceLoader
+ BeanDefinitionRegistry getRegistry()
+ void loadBeanDefinitions(String[])
+ void setResourceLoader(ResourceLoader)
+ ResourceLoader getResourceLoader()
}
note top:拥有资源加载和beanDefinition注册两种能力


interface ListableBeanFactory {
~ Map<String,T> getBeansOfType(Class<T>)
~ String[] getBeanDefinitionNames()
}

class BeanDefinition {
- Class beanClass
- PropertyValues propertyValues
+ Class getBeanClass()
+ void setBeanClass(Class)
+ PropertyValues getPropertyValues()
+ void setPropertyValues(PropertyValues)
}
note top:定义bean信息的类,每个bean对应一个BeanDefinition的实例


class SimpleInstantiationStrategy {
+ Object instantiate(BeanDefinition)
}

interface InstantiationStrategy {
~ Object instantiate(BeanDefinition)
}

interface BeanFactory {
~ Object getBean(String)
}

class BeanReference {
- String beanName
+ String getBeanName()
}


class CglibSubclassingInstantiationStrategy {
+ Object instantiate(BeanDefinition)
}

class DefaultListableBeanFactory {
- Map<String,BeanDefinition> beanDefinitionMap
+ void registerBeanDefinition(String,BeanDefinition)
# BeanDefinition getBeanDefinition(String)
}


interface AutowireCapableBeanFactory {
}
interface ConfigurableBeanFactory {
}
interface SingletonBeanRegistry {
~ Object getSingleton(String)
}
note top:定义添加和获取单例bean的方法

interface BeanDefinitionRegistry {
~ void registerBeanDefinition(String,BeanDefinition)
}
note top:BeanDefinition注册表接口,定义注册BeanDefinition的方法

abstract class AbstractBeanFactory {
+ Object getBean(String)
# {abstract}Object createBean(String,BeanDefinition)
# {abstract}BeanDefinition getBeanDefinition(String)
}

interface HierarchicalBeanFactory {
}
class DefaultSingletonBeanRegistry {
- Map<String,Object> singletonObjects
+ Object getSingleton(String)
# void addSingleton(String,Object)
}


abstract class AbstractAutowireCapableBeanFactory {
- InstantiationStrategy instantiationStrategy
+ InstantiationStrategy getInstantiationStrategy()
+ void setInstantiationStrategy(InstantiationStrategy)
# Object createBean(String,BeanDefinition)
# Object doCreateBean(String,BeanDefinition)
# Object createBeanInstance(BeanDefinition)
# void applyPropertyValues(String,Object,BeanDefinition)
}


class XmlBeanDefinitionReader {
+ {static} String BEAN_ELEMENT
+ {static} String PROPERTY_ELEMENT
+ {static} String ID_ATTRIBUTE
+ {static} String NAME_ATTRIBUTE
+ {static} String CLASS_ATTRIBUTE
+ {static} String VALUE_ATTRIBUTE
+ {static} String REF_ATTRIBUTE
+ void loadBeanDefinitions(String)
+ void loadBeanDefinitions(Resource)
# void doLoadBeanDefinitions(InputStream)
}
note top:从xml文件中读取的实现类


interface ConfigurableListableBeanFactory {
~ BeanDefinition getBeanDefinition(String)
}



BeanDefinitionReader <|.. AbstractBeanDefinitionReader
BeanFactory <|-- ListableBeanFactory
InstantiationStrategy <|.. SimpleInstantiationStrategy
InstantiationStrategy <|.. CglibSubclassingInstantiationStrategy
BeanDefinitionRegistry <|.. DefaultListableBeanFactory
AbstractAutowireCapableBeanFactory <|-- DefaultListableBeanFactory
BeanFactory <|-- AutowireCapableBeanFactory
HierarchicalBeanFactory <|-- ConfigurableBeanFactory
SingletonBeanRegistry <|-- ConfigurableBeanFactory
BeanFactory <|.. AbstractBeanFactory
DefaultSingletonBeanRegistry <|-- AbstractBeanFactory
BeanFactory <|-- HierarchicalBeanFactory
SingletonBeanRegistry <|.. DefaultSingletonBeanRegistry
AbstractBeanFactory <|-- AbstractAutowireCapableBeanFactory
AbstractBeanDefinitionReader <|-- XmlBeanDefinitionReader
ListableBeanFactory <|-- ConfigurableListableBeanFactory
AutowireCapableBeanFactory <|-- ConfigurableListableBeanFactory
ConfigurableBeanFactory <|-- ConfigurableListableBeanFactory
@enduml